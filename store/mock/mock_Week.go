// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"time"
	"trainer-helper/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockWeek creates a new instance of MockWeek. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeek(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeek {
	mock := &MockWeek{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeek is an autogenerated mock type for the Week type
type MockWeek struct {
	mock.Mock
}

type MockWeek_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeek) EXPECT() *MockWeek_Expecter {
	return &MockWeek_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockWeek
func (_mock *MockWeek) Delete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeek_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWeek_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - modelId
func (_e *MockWeek_Expecter) Delete(modelId interface{}) *MockWeek_Delete_Call {
	return &MockWeek_Delete_Call{Call: _e.mock.On("Delete", modelId)}
}

func (_c *MockWeek_Delete_Call) Run(run func(modelId int)) *MockWeek_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockWeek_Delete_Call) Return(err error) *MockWeek_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeek_Delete_Call) RunAndReturn(run func(modelId int) error) *MockWeek_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockWeek
func (_mock *MockWeek) Get() ([]model.Week, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Week
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Week, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Week); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Week)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeek_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWeek_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockWeek_Expecter) Get() *MockWeek_Get_Call {
	return &MockWeek_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockWeek_Get_Call) Run(run func()) *MockWeek_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWeek_Get_Call) Return(weeks []model.Week, err error) *MockWeek_Get_Call {
	_c.Call.Return(weeks, err)
	return _c
}

func (_c *MockWeek_Get_Call) RunAndReturn(run func() ([]model.Week, error)) *MockWeek_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastWeekDate provides a mock function for the type MockWeek
func (_mock *MockWeek) GetLastWeekDate(blockId int) (time.Time, error) {
	ret := _mock.Called(blockId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastWeekDate")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (time.Time, error)); ok {
		return returnFunc(blockId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) time.Time); ok {
		r0 = returnFunc(blockId)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(blockId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeek_GetLastWeekDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastWeekDate'
type MockWeek_GetLastWeekDate_Call struct {
	*mock.Call
}

// GetLastWeekDate is a helper method to define mock.On call
//   - blockId
func (_e *MockWeek_Expecter) GetLastWeekDate(blockId interface{}) *MockWeek_GetLastWeekDate_Call {
	return &MockWeek_GetLastWeekDate_Call{Call: _e.mock.On("GetLastWeekDate", blockId)}
}

func (_c *MockWeek_GetLastWeekDate_Call) Run(run func(blockId int)) *MockWeek_GetLastWeekDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockWeek_GetLastWeekDate_Call) Return(time1 time.Time, err error) *MockWeek_GetLastWeekDate_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockWeek_GetLastWeekDate_Call) RunAndReturn(run func(blockId int) (time.Time, error)) *MockWeek_GetLastWeekDate_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockWeek
func (_mock *MockWeek) Insert(model1 *model.Week) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Week) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeek_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockWeek_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockWeek_Expecter) Insert(model1 interface{}) *MockWeek_Insert_Call {
	return &MockWeek_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockWeek_Insert_Call) Run(run func(model1 *model.Week)) *MockWeek_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Week))
	})
	return _c
}

func (_c *MockWeek_Insert_Call) Return(err error) *MockWeek_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeek_Insert_Call) RunAndReturn(run func(model1 *model.Week) error) *MockWeek_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockWeek
func (_mock *MockWeek) InsertMany(models *[]model.Week) error {
	ret := _mock.Called(models)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]model.Week) error); ok {
		r0 = returnFunc(models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeek_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockWeek_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - models
func (_e *MockWeek_Expecter) InsertMany(models interface{}) *MockWeek_InsertMany_Call {
	return &MockWeek_InsertMany_Call{Call: _e.mock.On("InsertMany", models)}
}

func (_c *MockWeek_InsertMany_Call) Run(run func(models *[]model.Week)) *MockWeek_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]model.Week))
	})
	return _c
}

func (_c *MockWeek_InsertMany_Call) Return(err error) *MockWeek_InsertMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeek_InsertMany_Call) RunAndReturn(run func(models *[]model.Week) error) *MockWeek_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// UndeleteMany provides a mock function for the type MockWeek
func (_mock *MockWeek) UndeleteMany(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for UndeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeek_UndeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndeleteMany'
type MockWeek_UndeleteMany_Call struct {
	*mock.Call
}

// UndeleteMany is a helper method to define mock.On call
//   - modelIds
func (_e *MockWeek_Expecter) UndeleteMany(modelIds interface{}) *MockWeek_UndeleteMany_Call {
	return &MockWeek_UndeleteMany_Call{Call: _e.mock.On("UndeleteMany", modelIds)}
}

func (_c *MockWeek_UndeleteMany_Call) Run(run func(modelIds []int)) *MockWeek_UndeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeek_UndeleteMany_Call) Return(err error) *MockWeek_UndeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeek_UndeleteMany_Call) RunAndReturn(run func(modelIds []int) error) *MockWeek_UndeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWeek
func (_mock *MockWeek) Update(model1 *model.Week) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Week) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeek_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWeek_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockWeek_Expecter) Update(model1 interface{}) *MockWeek_Update_Call {
	return &MockWeek_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockWeek_Update_Call) Run(run func(model1 *model.Week)) *MockWeek_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Week))
	})
	return _c
}

func (_c *MockWeek_Update_Call) Return(err error) *MockWeek_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeek_Update_Call) RunAndReturn(run func(model1 *model.Week) error) *MockWeek_Update_Call {
	_c.Call.Return(run)
	return _c
}
