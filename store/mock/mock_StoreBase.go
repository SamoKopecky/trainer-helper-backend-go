// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockStoreBase creates a new instance of MockStoreBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoreBase[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoreBase[T] {
	mock := &MockStoreBase[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStoreBase is an autogenerated mock type for the StoreBase type
type MockStoreBase[T any] struct {
	mock.Mock
}

type MockStoreBase_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockStoreBase[T]) EXPECT() *MockStoreBase_Expecter[T] {
	return &MockStoreBase_Expecter[T]{mock: &_m.Mock}
}

// Get provides a mock function for the type MockStoreBase
func (_mock *MockStoreBase[T]) Get() ([]T, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]T, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStoreBase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStoreBase_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockStoreBase_Expecter[T]) Get() *MockStoreBase_Get_Call[T] {
	return &MockStoreBase_Get_Call[T]{Call: _e.mock.On("Get")}
}

func (_c *MockStoreBase_Get_Call[T]) Run(run func()) *MockStoreBase_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoreBase_Get_Call[T]) Return(vs []T, err error) *MockStoreBase_Get_Call[T] {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockStoreBase_Get_Call[T]) RunAndReturn(run func() ([]T, error)) *MockStoreBase_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockStoreBase
func (_mock *MockStoreBase[T]) Insert(model *T) error {
	ret := _mock.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*T) error); ok {
		r0 = returnFunc(model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStoreBase_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockStoreBase_Insert_Call[T any] struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model
func (_e *MockStoreBase_Expecter[T]) Insert(model interface{}) *MockStoreBase_Insert_Call[T] {
	return &MockStoreBase_Insert_Call[T]{Call: _e.mock.On("Insert", model)}
}

func (_c *MockStoreBase_Insert_Call[T]) Run(run func(model *T)) *MockStoreBase_Insert_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *MockStoreBase_Insert_Call[T]) Return(err error) *MockStoreBase_Insert_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStoreBase_Insert_Call[T]) RunAndReturn(run func(model *T) error) *MockStoreBase_Insert_Call[T] {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockStoreBase
func (_mock *MockStoreBase[T]) InsertMany(models *[]T) error {
	ret := _mock.Called(models)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]T) error); ok {
		r0 = returnFunc(models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStoreBase_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockStoreBase_InsertMany_Call[T any] struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - models
func (_e *MockStoreBase_Expecter[T]) InsertMany(models interface{}) *MockStoreBase_InsertMany_Call[T] {
	return &MockStoreBase_InsertMany_Call[T]{Call: _e.mock.On("InsertMany", models)}
}

func (_c *MockStoreBase_InsertMany_Call[T]) Run(run func(models *[]T)) *MockStoreBase_InsertMany_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]T))
	})
	return _c
}

func (_c *MockStoreBase_InsertMany_Call[T]) Return(err error) *MockStoreBase_InsertMany_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStoreBase_InsertMany_Call[T]) RunAndReturn(run func(models *[]T) error) *MockStoreBase_InsertMany_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockStoreBase
func (_mock *MockStoreBase[T]) Update(model *T) error {
	ret := _mock.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*T) error); ok {
		r0 = returnFunc(model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStoreBase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStoreBase_Update_Call[T any] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model
func (_e *MockStoreBase_Expecter[T]) Update(model interface{}) *MockStoreBase_Update_Call[T] {
	return &MockStoreBase_Update_Call[T]{Call: _e.mock.On("Update", model)}
}

func (_c *MockStoreBase_Update_Call[T]) Run(run func(model *T)) *MockStoreBase_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *MockStoreBase_Update_Call[T]) Return(err error) *MockStoreBase_Update_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStoreBase_Update_Call[T]) RunAndReturn(run func(model *T) error) *MockStoreBase_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}
