// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"trainer-helper/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockExercise creates a new instance of MockExercise. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExercise(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExercise {
	mock := &MockExercise{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExercise is an autogenerated mock type for the Exercise type
type MockExercise struct {
	mock.Mock
}

type MockExercise_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExercise) EXPECT() *MockExercise_Expecter {
	return &MockExercise_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockExercise
func (_mock *MockExercise) Delete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockExercise_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - modelId
func (_e *MockExercise_Expecter) Delete(modelId interface{}) *MockExercise_Delete_Call {
	return &MockExercise_Delete_Call{Call: _e.mock.On("Delete", modelId)}
}

func (_c *MockExercise_Delete_Call) Run(run func(modelId int)) *MockExercise_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockExercise_Delete_Call) Return(err error) *MockExercise_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_Delete_Call) RunAndReturn(run func(modelId int) error) *MockExercise_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByWeekDayId provides a mock function for the type MockExercise
func (_mock *MockExercise) DeleteByWeekDayId(weekDayId int) error {
	ret := _mock.Called(weekDayId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByWeekDayId")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(weekDayId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_DeleteByWeekDayId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByWeekDayId'
type MockExercise_DeleteByWeekDayId_Call struct {
	*mock.Call
}

// DeleteByWeekDayId is a helper method to define mock.On call
//   - weekDayId
func (_e *MockExercise_Expecter) DeleteByWeekDayId(weekDayId interface{}) *MockExercise_DeleteByWeekDayId_Call {
	return &MockExercise_DeleteByWeekDayId_Call{Call: _e.mock.On("DeleteByWeekDayId", weekDayId)}
}

func (_c *MockExercise_DeleteByWeekDayId_Call) Run(run func(weekDayId int)) *MockExercise_DeleteByWeekDayId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockExercise_DeleteByWeekDayId_Call) Return(err error) *MockExercise_DeleteByWeekDayId_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_DeleteByWeekDayId_Call) RunAndReturn(run func(weekDayId int) error) *MockExercise_DeleteByWeekDayId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type MockExercise
func (_mock *MockExercise) DeleteMany(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockExercise_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - modelIds
func (_e *MockExercise_Expecter) DeleteMany(modelIds interface{}) *MockExercise_DeleteMany_Call {
	return &MockExercise_DeleteMany_Call{Call: _e.mock.On("DeleteMany", modelIds)}
}

func (_c *MockExercise_DeleteMany_Call) Run(run func(modelIds []int)) *MockExercise_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockExercise_DeleteMany_Call) Return(err error) *MockExercise_DeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_DeleteMany_Call) RunAndReturn(run func(modelIds []int) error) *MockExercise_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManyReal provides a mock function for the type MockExercise
func (_mock *MockExercise) DeleteManyReal(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManyReal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_DeleteManyReal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManyReal'
type MockExercise_DeleteManyReal_Call struct {
	*mock.Call
}

// DeleteManyReal is a helper method to define mock.On call
//   - modelIds
func (_e *MockExercise_Expecter) DeleteManyReal(modelIds interface{}) *MockExercise_DeleteManyReal_Call {
	return &MockExercise_DeleteManyReal_Call{Call: _e.mock.On("DeleteManyReal", modelIds)}
}

func (_c *MockExercise_DeleteManyReal_Call) Run(run func(modelIds []int)) *MockExercise_DeleteManyReal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockExercise_DeleteManyReal_Call) Return(err error) *MockExercise_DeleteManyReal_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_DeleteManyReal_Call) RunAndReturn(run func(modelIds []int) error) *MockExercise_DeleteManyReal_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockExercise
func (_mock *MockExercise) Get() ([]model.Exercise, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Exercise
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Exercise, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Exercise); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Exercise)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExercise_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockExercise_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockExercise_Expecter) Get() *MockExercise_Get_Call {
	return &MockExercise_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockExercise_Get_Call) Run(run func()) *MockExercise_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExercise_Get_Call) Return(exercises []model.Exercise, err error) *MockExercise_Get_Call {
	_c.Call.Return(exercises, err)
	return _c
}

func (_c *MockExercise_Get_Call) RunAndReturn(run func() ([]model.Exercise, error)) *MockExercise_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetExerciseWorkSets provides a mock function for the type MockExercise
func (_mock *MockExercise) GetExerciseWorkSets(weekDayIds []int) ([]model.Exercise, error) {
	ret := _mock.Called(weekDayIds)

	if len(ret) == 0 {
		panic("no return value specified for GetExerciseWorkSets")
	}

	var r0 []model.Exercise
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int) ([]model.Exercise, error)); ok {
		return returnFunc(weekDayIds)
	}
	if returnFunc, ok := ret.Get(0).(func([]int) []model.Exercise); ok {
		r0 = returnFunc(weekDayIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Exercise)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int) error); ok {
		r1 = returnFunc(weekDayIds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExercise_GetExerciseWorkSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExerciseWorkSets'
type MockExercise_GetExerciseWorkSets_Call struct {
	*mock.Call
}

// GetExerciseWorkSets is a helper method to define mock.On call
//   - weekDayIds
func (_e *MockExercise_Expecter) GetExerciseWorkSets(weekDayIds interface{}) *MockExercise_GetExerciseWorkSets_Call {
	return &MockExercise_GetExerciseWorkSets_Call{Call: _e.mock.On("GetExerciseWorkSets", weekDayIds)}
}

func (_c *MockExercise_GetExerciseWorkSets_Call) Run(run func(weekDayIds []int)) *MockExercise_GetExerciseWorkSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockExercise_GetExerciseWorkSets_Call) Return(exercises []model.Exercise, err error) *MockExercise_GetExerciseWorkSets_Call {
	_c.Call.Return(exercises, err)
	return _c
}

func (_c *MockExercise_GetExerciseWorkSets_Call) RunAndReturn(run func(weekDayIds []int) ([]model.Exercise, error)) *MockExercise_GetExerciseWorkSets_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockExercise
func (_mock *MockExercise) Insert(model1 *model.Exercise) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Exercise) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockExercise_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockExercise_Expecter) Insert(model1 interface{}) *MockExercise_Insert_Call {
	return &MockExercise_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockExercise_Insert_Call) Run(run func(model1 *model.Exercise)) *MockExercise_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Exercise))
	})
	return _c
}

func (_c *MockExercise_Insert_Call) Return(err error) *MockExercise_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_Insert_Call) RunAndReturn(run func(model1 *model.Exercise) error) *MockExercise_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockExercise
func (_mock *MockExercise) InsertMany(models *[]model.Exercise) error {
	ret := _mock.Called(models)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]model.Exercise) error); ok {
		r0 = returnFunc(models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockExercise_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - models
func (_e *MockExercise_Expecter) InsertMany(models interface{}) *MockExercise_InsertMany_Call {
	return &MockExercise_InsertMany_Call{Call: _e.mock.On("InsertMany", models)}
}

func (_c *MockExercise_InsertMany_Call) Run(run func(models *[]model.Exercise)) *MockExercise_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]model.Exercise))
	})
	return _c
}

func (_c *MockExercise_InsertMany_Call) Return(err error) *MockExercise_InsertMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_InsertMany_Call) RunAndReturn(run func(models *[]model.Exercise) error) *MockExercise_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// UndeleteMany provides a mock function for the type MockExercise
func (_mock *MockExercise) UndeleteMany(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for UndeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_UndeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndeleteMany'
type MockExercise_UndeleteMany_Call struct {
	*mock.Call
}

// UndeleteMany is a helper method to define mock.On call
//   - modelIds
func (_e *MockExercise_Expecter) UndeleteMany(modelIds interface{}) *MockExercise_UndeleteMany_Call {
	return &MockExercise_UndeleteMany_Call{Call: _e.mock.On("UndeleteMany", modelIds)}
}

func (_c *MockExercise_UndeleteMany_Call) Run(run func(modelIds []int)) *MockExercise_UndeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockExercise_UndeleteMany_Call) Return(err error) *MockExercise_UndeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_UndeleteMany_Call) RunAndReturn(run func(modelIds []int) error) *MockExercise_UndeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockExercise
func (_mock *MockExercise) Update(model1 *model.Exercise) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Exercise) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExercise_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockExercise_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockExercise_Expecter) Update(model1 interface{}) *MockExercise_Update_Call {
	return &MockExercise_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockExercise_Update_Call) Run(run func(model1 *model.Exercise)) *MockExercise_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Exercise))
	})
	return _c
}

func (_c *MockExercise_Update_Call) Return(err error) *MockExercise_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExercise_Update_Call) RunAndReturn(run func(model1 *model.Exercise) error) *MockExercise_Update_Call {
	_c.Call.Return(run)
	return _c
}
