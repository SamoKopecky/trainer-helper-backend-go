// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"time"
	"trainer-helper/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTimeslot creates a new instance of MockTimeslot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeslot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeslot {
	mock := &MockTimeslot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTimeslot is an autogenerated mock type for the Timeslot type
type MockTimeslot struct {
	mock.Mock
}

type MockTimeslot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeslot) EXPECT() *MockTimeslot_Expecter {
	return &MockTimeslot_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) Delete(timeslotId int) error {
	ret := _mock.Called(timeslotId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(timeslotId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTimeslot_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTimeslot_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - timeslotId
func (_e *MockTimeslot_Expecter) Delete(timeslotId interface{}) *MockTimeslot_Delete_Call {
	return &MockTimeslot_Delete_Call{Call: _e.mock.On("Delete", timeslotId)}
}

func (_c *MockTimeslot_Delete_Call) Run(run func(timeslotId int)) *MockTimeslot_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTimeslot_Delete_Call) Return(err error) *MockTimeslot_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTimeslot_Delete_Call) RunAndReturn(run func(timeslotId int) error) *MockTimeslot_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) Get() ([]model.Timeslot, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Timeslot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Timeslot, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Timeslot); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Timeslot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTimeslot_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTimeslot_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockTimeslot_Expecter) Get() *MockTimeslot_Get_Call {
	return &MockTimeslot_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockTimeslot_Get_Call) Run(run func()) *MockTimeslot_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimeslot_Get_Call) Return(timeslots []model.Timeslot, err error) *MockTimeslot_Get_Call {
	_c.Call.Return(timeslots, err)
	return _c
}

func (_c *MockTimeslot_Get_Call) RunAndReturn(run func() ([]model.Timeslot, error)) *MockTimeslot_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) GetById(timeslotId int) (model.Timeslot, error) {
	ret := _mock.Called(timeslotId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 model.Timeslot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (model.Timeslot, error)); ok {
		return returnFunc(timeslotId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) model.Timeslot); ok {
		r0 = returnFunc(timeslotId)
	} else {
		r0 = ret.Get(0).(model.Timeslot)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(timeslotId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTimeslot_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockTimeslot_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - timeslotId
func (_e *MockTimeslot_Expecter) GetById(timeslotId interface{}) *MockTimeslot_GetById_Call {
	return &MockTimeslot_GetById_Call{Call: _e.mock.On("GetById", timeslotId)}
}

func (_c *MockTimeslot_GetById_Call) Run(run func(timeslotId int)) *MockTimeslot_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTimeslot_GetById_Call) Return(timeslot model.Timeslot, err error) *MockTimeslot_GetById_Call {
	_c.Call.Return(timeslot, err)
	return _c
}

func (_c *MockTimeslot_GetById_Call) RunAndReturn(run func(timeslotId int) (model.Timeslot, error)) *MockTimeslot_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTimeRangeAndUserId provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) GetByTimeRangeAndUserId(startDate time.Time, endDate time.Time, trainerId string, isTrainer bool) ([]model.Timeslot, error) {
	ret := _mock.Called(startDate, endDate, trainerId, isTrainer)

	if len(ret) == 0 {
		panic("no return value specified for GetByTimeRangeAndUserId")
	}

	var r0 []model.Timeslot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time, time.Time, string, bool) ([]model.Timeslot, error)); ok {
		return returnFunc(startDate, endDate, trainerId, isTrainer)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time, time.Time, string, bool) []model.Timeslot); ok {
		r0 = returnFunc(startDate, endDate, trainerId, isTrainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Timeslot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time, time.Time, string, bool) error); ok {
		r1 = returnFunc(startDate, endDate, trainerId, isTrainer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTimeslot_GetByTimeRangeAndUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTimeRangeAndUserId'
type MockTimeslot_GetByTimeRangeAndUserId_Call struct {
	*mock.Call
}

// GetByTimeRangeAndUserId is a helper method to define mock.On call
//   - startDate
//   - endDate
//   - trainerId
//   - isTrainer
func (_e *MockTimeslot_Expecter) GetByTimeRangeAndUserId(startDate interface{}, endDate interface{}, trainerId interface{}, isTrainer interface{}) *MockTimeslot_GetByTimeRangeAndUserId_Call {
	return &MockTimeslot_GetByTimeRangeAndUserId_Call{Call: _e.mock.On("GetByTimeRangeAndUserId", startDate, endDate, trainerId, isTrainer)}
}

func (_c *MockTimeslot_GetByTimeRangeAndUserId_Call) Run(run func(startDate time.Time, endDate time.Time, trainerId string, isTrainer bool)) *MockTimeslot_GetByTimeRangeAndUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockTimeslot_GetByTimeRangeAndUserId_Call) Return(timeslots []model.Timeslot, err error) *MockTimeslot_GetByTimeRangeAndUserId_Call {
	_c.Call.Return(timeslots, err)
	return _c
}

func (_c *MockTimeslot_GetByTimeRangeAndUserId_Call) RunAndReturn(run func(startDate time.Time, endDate time.Time, trainerId string, isTrainer bool) ([]model.Timeslot, error)) *MockTimeslot_GetByTimeRangeAndUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) Insert(model1 *model.Timeslot) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Timeslot) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTimeslot_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockTimeslot_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockTimeslot_Expecter) Insert(model1 interface{}) *MockTimeslot_Insert_Call {
	return &MockTimeslot_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockTimeslot_Insert_Call) Run(run func(model1 *model.Timeslot)) *MockTimeslot_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Timeslot))
	})
	return _c
}

func (_c *MockTimeslot_Insert_Call) Return(err error) *MockTimeslot_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTimeslot_Insert_Call) RunAndReturn(run func(model1 *model.Timeslot) error) *MockTimeslot_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) InsertMany(models *[]model.Timeslot) error {
	ret := _mock.Called(models)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]model.Timeslot) error); ok {
		r0 = returnFunc(models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTimeslot_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockTimeslot_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - models
func (_e *MockTimeslot_Expecter) InsertMany(models interface{}) *MockTimeslot_InsertMany_Call {
	return &MockTimeslot_InsertMany_Call{Call: _e.mock.On("InsertMany", models)}
}

func (_c *MockTimeslot_InsertMany_Call) Run(run func(models *[]model.Timeslot)) *MockTimeslot_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]model.Timeslot))
	})
	return _c
}

func (_c *MockTimeslot_InsertMany_Call) Return(err error) *MockTimeslot_InsertMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTimeslot_InsertMany_Call) RunAndReturn(run func(models *[]model.Timeslot) error) *MockTimeslot_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// Undelete provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) Undelete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Undelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTimeslot_Undelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Undelete'
type MockTimeslot_Undelete_Call struct {
	*mock.Call
}

// Undelete is a helper method to define mock.On call
//   - modelId
func (_e *MockTimeslot_Expecter) Undelete(modelId interface{}) *MockTimeslot_Undelete_Call {
	return &MockTimeslot_Undelete_Call{Call: _e.mock.On("Undelete", modelId)}
}

func (_c *MockTimeslot_Undelete_Call) Run(run func(modelId int)) *MockTimeslot_Undelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTimeslot_Undelete_Call) Return(err error) *MockTimeslot_Undelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTimeslot_Undelete_Call) RunAndReturn(run func(modelId int) error) *MockTimeslot_Undelete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTimeslot
func (_mock *MockTimeslot) Update(model1 *model.Timeslot) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Timeslot) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTimeslot_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTimeslot_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockTimeslot_Expecter) Update(model1 interface{}) *MockTimeslot_Update_Call {
	return &MockTimeslot_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockTimeslot_Update_Call) Run(run func(model1 *model.Timeslot)) *MockTimeslot_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Timeslot))
	})
	return _c
}

func (_c *MockTimeslot_Update_Call) Return(err error) *MockTimeslot_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTimeslot_Update_Call) RunAndReturn(run func(model1 *model.Timeslot) error) *MockTimeslot_Update_Call {
	_c.Call.Return(run)
	return _c
}
