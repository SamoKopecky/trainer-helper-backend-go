// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"time"
	"trainer-helper/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockWeekDay creates a new instance of MockWeekDay. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeekDay(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeekDay {
	mock := &MockWeekDay{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeekDay is an autogenerated mock type for the WeekDay type
type MockWeekDay struct {
	mock.Mock
}

type MockWeekDay_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeekDay) EXPECT() *MockWeekDay_Expecter {
	return &MockWeekDay_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) Delete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWeekDay_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - modelId
func (_e *MockWeekDay_Expecter) Delete(modelId interface{}) *MockWeekDay_Delete_Call {
	return &MockWeekDay_Delete_Call{Call: _e.mock.On("Delete", modelId)}
}

func (_c *MockWeekDay_Delete_Call) Run(run func(modelId int)) *MockWeekDay_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockWeekDay_Delete_Call) Return(err error) *MockWeekDay_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_Delete_Call) RunAndReturn(run func(modelId int) error) *MockWeekDay_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) DeleteMany(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockWeekDay_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - modelIds
func (_e *MockWeekDay_Expecter) DeleteMany(modelIds interface{}) *MockWeekDay_DeleteMany_Call {
	return &MockWeekDay_DeleteMany_Call{Call: _e.mock.On("DeleteMany", modelIds)}
}

func (_c *MockWeekDay_DeleteMany_Call) Run(run func(modelIds []int)) *MockWeekDay_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeekDay_DeleteMany_Call) Return(err error) *MockWeekDay_DeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_DeleteMany_Call) RunAndReturn(run func(modelIds []int) error) *MockWeekDay_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManyReal provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) DeleteManyReal(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManyReal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_DeleteManyReal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManyReal'
type MockWeekDay_DeleteManyReal_Call struct {
	*mock.Call
}

// DeleteManyReal is a helper method to define mock.On call
//   - modelIds
func (_e *MockWeekDay_Expecter) DeleteManyReal(modelIds interface{}) *MockWeekDay_DeleteManyReal_Call {
	return &MockWeekDay_DeleteManyReal_Call{Call: _e.mock.On("DeleteManyReal", modelIds)}
}

func (_c *MockWeekDay_DeleteManyReal_Call) Run(run func(modelIds []int)) *MockWeekDay_DeleteManyReal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeekDay_DeleteManyReal_Call) Return(err error) *MockWeekDay_DeleteManyReal_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_DeleteManyReal_Call) RunAndReturn(run func(modelIds []int) error) *MockWeekDay_DeleteManyReal_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTimeslot provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) DeleteTimeslot(weekId int) error {
	ret := _mock.Called(weekId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTimeslot")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(weekId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_DeleteTimeslot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTimeslot'
type MockWeekDay_DeleteTimeslot_Call struct {
	*mock.Call
}

// DeleteTimeslot is a helper method to define mock.On call
//   - weekId
func (_e *MockWeekDay_Expecter) DeleteTimeslot(weekId interface{}) *MockWeekDay_DeleteTimeslot_Call {
	return &MockWeekDay_DeleteTimeslot_Call{Call: _e.mock.On("DeleteTimeslot", weekId)}
}

func (_c *MockWeekDay_DeleteTimeslot_Call) Run(run func(weekId int)) *MockWeekDay_DeleteTimeslot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockWeekDay_DeleteTimeslot_Call) Return(err error) *MockWeekDay_DeleteTimeslot_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_DeleteTimeslot_Call) RunAndReturn(run func(weekId int) error) *MockWeekDay_DeleteTimeslot_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) Get() ([]model.WeekDay, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.WeekDay
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.WeekDay, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.WeekDay); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WeekDay)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeekDay_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockWeekDay_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockWeekDay_Expecter) Get() *MockWeekDay_Get_Call {
	return &MockWeekDay_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockWeekDay_Get_Call) Run(run func()) *MockWeekDay_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWeekDay_Get_Call) Return(weekDays []model.WeekDay, err error) *MockWeekDay_Get_Call {
	_c.Call.Return(weekDays, err)
	return _c
}

func (_c *MockWeekDay_Get_Call) RunAndReturn(run func() ([]model.WeekDay, error)) *MockWeekDay_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDate provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) GetByDate(dayDate time.Time, userId string) ([]model.WeekDay, error) {
	ret := _mock.Called(dayDate, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByDate")
	}

	var r0 []model.WeekDay
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time, string) ([]model.WeekDay, error)); ok {
		return returnFunc(dayDate, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time, string) []model.WeekDay); ok {
		r0 = returnFunc(dayDate, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WeekDay)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time, string) error); ok {
		r1 = returnFunc(dayDate, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeekDay_GetByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDate'
type MockWeekDay_GetByDate_Call struct {
	*mock.Call
}

// GetByDate is a helper method to define mock.On call
//   - dayDate
//   - userId
func (_e *MockWeekDay_Expecter) GetByDate(dayDate interface{}, userId interface{}) *MockWeekDay_GetByDate_Call {
	return &MockWeekDay_GetByDate_Call{Call: _e.mock.On("GetByDate", dayDate, userId)}
}

func (_c *MockWeekDay_GetByDate_Call) Run(run func(dayDate time.Time, userId string)) *MockWeekDay_GetByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string))
	})
	return _c
}

func (_c *MockWeekDay_GetByDate_Call) Return(weekDays []model.WeekDay, err error) *MockWeekDay_GetByDate_Call {
	_c.Call.Return(weekDays, err)
	return _c
}

func (_c *MockWeekDay_GetByDate_Call) RunAndReturn(run func(dayDate time.Time, userId string) ([]model.WeekDay, error)) *MockWeekDay_GetByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTimeslotIds provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) GetByTimeslotIds(timeslotIds []int) ([]model.WeekDay, error) {
	ret := _mock.Called(timeslotIds)

	if len(ret) == 0 {
		panic("no return value specified for GetByTimeslotIds")
	}

	var r0 []model.WeekDay
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int) ([]model.WeekDay, error)); ok {
		return returnFunc(timeslotIds)
	}
	if returnFunc, ok := ret.Get(0).(func([]int) []model.WeekDay); ok {
		r0 = returnFunc(timeslotIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WeekDay)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int) error); ok {
		r1 = returnFunc(timeslotIds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeekDay_GetByTimeslotIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTimeslotIds'
type MockWeekDay_GetByTimeslotIds_Call struct {
	*mock.Call
}

// GetByTimeslotIds is a helper method to define mock.On call
//   - timeslotIds
func (_e *MockWeekDay_Expecter) GetByTimeslotIds(timeslotIds interface{}) *MockWeekDay_GetByTimeslotIds_Call {
	return &MockWeekDay_GetByTimeslotIds_Call{Call: _e.mock.On("GetByTimeslotIds", timeslotIds)}
}

func (_c *MockWeekDay_GetByTimeslotIds_Call) Run(run func(timeslotIds []int)) *MockWeekDay_GetByTimeslotIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeekDay_GetByTimeslotIds_Call) Return(weekDays []model.WeekDay, err error) *MockWeekDay_GetByTimeslotIds_Call {
	_c.Call.Return(weekDays, err)
	return _c
}

func (_c *MockWeekDay_GetByTimeslotIds_Call) RunAndReturn(run func(timeslotIds []int) ([]model.WeekDay, error)) *MockWeekDay_GetByTimeslotIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetByWeekIdsWithDeleted provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) GetByWeekIdsWithDeleted(weekIds []int) ([]model.WeekDay, error) {
	ret := _mock.Called(weekIds)

	if len(ret) == 0 {
		panic("no return value specified for GetByWeekIdsWithDeleted")
	}

	var r0 []model.WeekDay
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int) ([]model.WeekDay, error)); ok {
		return returnFunc(weekIds)
	}
	if returnFunc, ok := ret.Get(0).(func([]int) []model.WeekDay); ok {
		r0 = returnFunc(weekIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WeekDay)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int) error); ok {
		r1 = returnFunc(weekIds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeekDay_GetByWeekIdsWithDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByWeekIdsWithDeleted'
type MockWeekDay_GetByWeekIdsWithDeleted_Call struct {
	*mock.Call
}

// GetByWeekIdsWithDeleted is a helper method to define mock.On call
//   - weekIds
func (_e *MockWeekDay_Expecter) GetByWeekIdsWithDeleted(weekIds interface{}) *MockWeekDay_GetByWeekIdsWithDeleted_Call {
	return &MockWeekDay_GetByWeekIdsWithDeleted_Call{Call: _e.mock.On("GetByWeekIdsWithDeleted", weekIds)}
}

func (_c *MockWeekDay_GetByWeekIdsWithDeleted_Call) Run(run func(weekIds []int)) *MockWeekDay_GetByWeekIdsWithDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeekDay_GetByWeekIdsWithDeleted_Call) Return(weekDays []model.WeekDay, err error) *MockWeekDay_GetByWeekIdsWithDeleted_Call {
	_c.Call.Return(weekDays, err)
	return _c
}

func (_c *MockWeekDay_GetByWeekIdsWithDeleted_Call) RunAndReturn(run func(weekIds []int) ([]model.WeekDay, error)) *MockWeekDay_GetByWeekIdsWithDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) Insert(model1 *model.WeekDay) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.WeekDay) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockWeekDay_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockWeekDay_Expecter) Insert(model1 interface{}) *MockWeekDay_Insert_Call {
	return &MockWeekDay_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockWeekDay_Insert_Call) Run(run func(model1 *model.WeekDay)) *MockWeekDay_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.WeekDay))
	})
	return _c
}

func (_c *MockWeekDay_Insert_Call) Return(err error) *MockWeekDay_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_Insert_Call) RunAndReturn(run func(model1 *model.WeekDay) error) *MockWeekDay_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) InsertMany(models *[]model.WeekDay) error {
	ret := _mock.Called(models)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]model.WeekDay) error); ok {
		r0 = returnFunc(models)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockWeekDay_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - models
func (_e *MockWeekDay_Expecter) InsertMany(models interface{}) *MockWeekDay_InsertMany_Call {
	return &MockWeekDay_InsertMany_Call{Call: _e.mock.On("InsertMany", models)}
}

func (_c *MockWeekDay_InsertMany_Call) Run(run func(models *[]model.WeekDay)) *MockWeekDay_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]model.WeekDay))
	})
	return _c
}

func (_c *MockWeekDay_InsertMany_Call) Return(err error) *MockWeekDay_InsertMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_InsertMany_Call) RunAndReturn(run func(models *[]model.WeekDay) error) *MockWeekDay_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// UndeleteMany provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) UndeleteMany(modelIds []int) error {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for UndeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]int) error); ok {
		r0 = returnFunc(modelIds)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_UndeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndeleteMany'
type MockWeekDay_UndeleteMany_Call struct {
	*mock.Call
}

// UndeleteMany is a helper method to define mock.On call
//   - modelIds
func (_e *MockWeekDay_Expecter) UndeleteMany(modelIds interface{}) *MockWeekDay_UndeleteMany_Call {
	return &MockWeekDay_UndeleteMany_Call{Call: _e.mock.On("UndeleteMany", modelIds)}
}

func (_c *MockWeekDay_UndeleteMany_Call) Run(run func(modelIds []int)) *MockWeekDay_UndeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockWeekDay_UndeleteMany_Call) Return(err error) *MockWeekDay_UndeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_UndeleteMany_Call) RunAndReturn(run func(modelIds []int) error) *MockWeekDay_UndeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWeekDay
func (_mock *MockWeekDay) Update(model1 *model.WeekDay) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.WeekDay) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWeekDay_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWeekDay_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockWeekDay_Expecter) Update(model1 interface{}) *MockWeekDay_Update_Call {
	return &MockWeekDay_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockWeekDay_Update_Call) Run(run func(model1 *model.WeekDay)) *MockWeekDay_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.WeekDay))
	})
	return _c
}

func (_c *MockWeekDay_Update_Call) Return(err error) *MockWeekDay_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWeekDay_Update_Call) RunAndReturn(run func(model1 *model.WeekDay) error) *MockWeekDay_Update_Call {
	_c.Call.Return(run)
	return _c
}
